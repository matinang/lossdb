% Generated by roxygen2 (4.0.2): do not edit by hand
\name{claim_changes}
\alias{claim_changes}
\title{Detect all changes in a \code{\link{loss_df}} at different calendar periods}
\usage{
claim_changes(ldf, calendar1, calendar2, values = NULL)
}
\arguments{
\item{ldf}{S3 object of class \code{\link{loss_df}}}

\item{calendar1}{the more recent calendar period to compare}

\item{calendar2}{the older calendar period.  Data at calendar2 will be compared to data at calendar1.}

\item{values}{a vector of the names or number of the columns to be compared for changes.  If NULL all comparable
columns will be compared. If any column names are provided in \code{values} argument, the function will only
compare the columns with the corresponding names.}
}
\description{
\code{claim_changes} is designed to make viewing all "changed claims" more simple.
 A "changed claim" is a claim in a \code{\link{loss_df}} in which one or more of the \code{values}
 has changed from one selected evaluation date to another. A changed claim must have
 a unique 'id' for it's 'origin'.  (i.e. if a claim differs origin year from 'eval1' to
'eval2' it will be returned as two seperate claims)
}
\details{
The motivation for \code{claim_changes} arose from the need to confirm that new claim data
added to the database is consistent with the claim data already in the database.  \code{claim_changes} produces a
data frame consisting only of claims with changes in the selected \code{values} argument during the
period between the evaluation dates of interest. By scanning over all the claims that have changes one can quickly
detect errors in the data (i.e. missing claims, an unexplainable decrease in paid losses, etc.).
Additionally it is often beneficial when reserving to have claim detail to support the changes
that occured, summarized on an origin level basis, from one reserve report to the next.  A review
of the claims that caused the change in the overall reserve can provide valuable information about
how the losses may develop.
}
\examples{
# return all claims with changes in all comparable columns in the 'loss_df'
claim_changes(ldf_data, calendar1 = 2014, calendar = 2013)

# return only claims with changes in 'paid_loss_only'
claim_changes(ldf_data, calendar1 = 2014, calendar2 = 2013, values = "paid_loss_only")

# return claims with changes in multiple 'values'
claim_changes(ldf_data, calendar1 = 2014, calendar2 = 2013,
        values = c("paid_loss_only", "incurred_loss_only", "claim_cts"))

# return claims with changes in multiple 'values' using column number
claim_changes(ldf_data, calendar1 = 2014, calendar2 = 2013,
        values = c(6, 8, 9))
}

